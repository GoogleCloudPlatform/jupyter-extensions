// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rendering of CodeComponentActions Component Renders initial state correctly 1`] = `
<div
  style={
    Object {
      "position": "absolute",
      "right": "8px",
      "top": "16px",
    }
  }
>
  <WithStyles(ForwardRef(Tooltip))
    title="Copy"
  >
    <WithStyles(ForwardRef(IconButton))
      onClick={[Function]}
      size="small"
    >
      <WithStyles(ForwardRef(Icon))>
        content_copy
      </WithStyles(ForwardRef(Icon))>
    </WithStyles(ForwardRef(IconButton))>
  </WithStyles(ForwardRef(Tooltip))>
  <ForwardRef(Portal)>
    <Toast
      autoHideDuration={4000}
      message="Code copied to clipboard"
      onClose={[Function]}
      open={false}
    />
  </ForwardRef(Portal)>
</div>
`;

exports[`Rendering of CodeComponentActions Component Renders initial state correctly 2`] = `
<div
  style={
    Object {
      "position": "relative",
    }
  }
>
  <SyntaxHighlighter
    language="python"
    style={
      Object {
        "hljs": Object {
          "background": "#f8f8ff",
          "color": "#000",
          "display": "block",
          "overflowX": "auto",
          "padding": "0.5em",
        },
        "hljs-addition": Object {
          "background": "#dfd",
        },
        "hljs-attribute": Object {
          "color": "#000080",
          "fontWeight": "normal",
        },
        "hljs-built_in": Object {
          "color": "#0086b3",
        },
        "hljs-builtin-name": Object {
          "color": "#0086b3",
        },
        "hljs-bullet": Object {
          "color": "#990073",
        },
        "hljs-comment": Object {
          "color": "#408080",
          "fontStyle": "italic",
        },
        "hljs-deletion": Object {
          "background": "#fdd",
        },
        "hljs-doctag": Object {
          "color": "#219161",
        },
        "hljs-emphasis": Object {
          "fontStyle": "italic",
        },
        "hljs-keyword": Object {
          "color": "#954121",
        },
        "hljs-link": Object {
          "color": "#b68",
        },
        "hljs-literal": Object {
          "color": "#954121",
        },
        "hljs-meta": Object {
          "color": "#999",
          "fontWeight": "bold",
        },
        "hljs-name": Object {
          "color": "#000080",
          "fontWeight": "normal",
        },
        "hljs-number": Object {
          "color": "#40a070",
        },
        "hljs-params": Object {
          "color": "#00f",
        },
        "hljs-quote": Object {
          "color": "#408080",
          "fontStyle": "italic",
        },
        "hljs-regexp": Object {
          "color": "#b68",
        },
        "hljs-section": Object {
          "color": "#19469d",
        },
        "hljs-selector-class": Object {
          "color": "#19469d",
        },
        "hljs-selector-id": Object {
          "color": "#19469d",
        },
        "hljs-selector-tag": Object {
          "color": "#954121",
        },
        "hljs-string": Object {
          "color": "#219161",
        },
        "hljs-strong": Object {
          "fontWeight": "bold",
        },
        "hljs-subst": Object {
          "color": "#954121",
        },
        "hljs-symbol": Object {
          "color": "#990073",
        },
        "hljs-tag": Object {
          "color": "#000080",
          "fontWeight": "normal",
        },
        "hljs-template-variable": Object {
          "color": "#008080",
        },
        "hljs-title": Object {
          "color": "#458",
          "fontWeight": "bold",
        },
        "hljs-type": Object {
          "color": "#19469d",
        },
        "hljs-variable": Object {
          "color": "#008080",
        },
      }
    }
    wrapLines={true}
  >
    Sample code
  </SyntaxHighlighter>
  <CodeComponentActions
    code="Sample code"
    copyEnabled={false}
  />
</div>
`;

exports[`Rendering of ExportData Component Renders initial state correctly 1`] = `
<Fragment>
  <ForwardRef(Portal)>
    <Toast
      message="Creating dataset..."
      onClose={[Function]}
      open={false}
    >
      <WithStyles(ForwardRef(CircularProgress))
        size={24}
      />
    </Toast>
  </ForwardRef(Portal)>
  <ForwardRef(Portal)>
    <Toast
      autoHideDuration={6000}
      error={true}
      onClose={[Function]}
      open={false}
    />
  </ForwardRef(Portal)>
  <DialogComponent
    header="Create new uCAIP Tables Dataset"
    height="460px"
    onCancel={null}
    onClose={null}
    onSubmit={[Function]}
    open={true}
    submitDisabled={true}
    submitLabel="Create dataset"
  >
    <RadioInput
      onChange={[Function]}
      options={
        Array [
          Object {
            "text": "Upload files from your computer",
            "value": "computer",
          },
          Object {
            "text": "Import data from BigQuery",
            "value": "bigquery",
          },
          Object {
            "text": "Import data from Google Cloud Storage",
            "value": "gcs",
          },
          Object {
            "text": "Select dataframe from kernel",
            "value": "dataframe",
          },
        ]
      }
      value="computer"
    />
    <div
      style={
        Object {
          "paddingTop": "16px",
        }
      }
    >
      <WithStyles(ForwardRef(FormControl))
        className="form_f96or0t"
        error={false}
      >
        <p
          className="title_f12dki3h"
        >
          Upload files from your computer
        </p>
        <TextInput
          label="Name"
          onChange={[Function]}
          placeholder="my_dataset"
        />
        <input
          accept=".csv"
          className="input_f1wt0yvj"
          id="ucaip-upload-dataset"
          onChange={[Function]}
          type="file"
        />
        <label
          className="fileInput_fc8wfj0"
          htmlFor="ucaip-upload-dataset"
        >
          <ThemeProvider
            theme={
              Object {
                "breakpoints": Object {
                  "between": [Function],
                  "down": [Function],
                  "keys": Array [
                    "xs",
                    "sm",
                    "md",
                    "lg",
                    "xl",
                  ],
                  "only": [Function],
                  "up": [Function],
                  "values": Object {
                    "lg": 1280,
                    "md": 960,
                    "sm": 600,
                    "xl": 1920,
                    "xs": 0,
                  },
                  "width": [Function],
                },
                "direction": "ltr",
                "mixins": Object {
                  "gutters": [Function],
                  "toolbar": Object {
                    "@media (min-width:0px) and (orientation: landscape)": Object {
                      "minHeight": 48,
                    },
                    "@media (min-width:600px)": Object {
                      "minHeight": 64,
                    },
                    "minHeight": 56,
                  },
                },
                "overrides": Object {
                  "MuiButton": Object {
                    "label": Object {
                      "color": "var(--jp-layout-color1, white)",
                      "textTransform": "capitalize",
                    },
                    "root": Object {
                      "&:hover": Object {
                        "backgroundColor": "#1a73e8",
                      },
                      "backgroundColor": "#1a73e8",
                      "borderRadius": "2px",
                      "lineHeight": 1.7,
                    },
                    "text": Object {
                      "padding": "1px 16px",
                    },
                  },
                },
                "palette": Object {
                  "action": Object {
                    "activatedOpacity": 0.12,
                    "active": "rgba(0, 0, 0, 0.54)",
                    "disabled": "rgba(0, 0, 0, 0.26)",
                    "disabledBackground": "rgba(0, 0, 0, 0.12)",
                    "disabledOpacity": 0.38,
                    "focus": "rgba(0, 0, 0, 0.12)",
                    "focusOpacity": 0.12,
                    "hover": "rgba(0, 0, 0, 0.04)",
                    "hoverOpacity": 0.04,
                    "selected": "rgba(0, 0, 0, 0.08)",
                    "selectedOpacity": 0.08,
                  },
                  "augmentColor": [Function],
                  "background": Object {
                    "default": "#fafafa",
                    "paper": "#fff",
                  },
                  "common": Object {
                    "black": "#000",
                    "white": "#fff",
                  },
                  "contrastThreshold": 3,
                  "divider": "rgba(0, 0, 0, 0.12)",
                  "error": Object {
                    "contrastText": "#fff",
                    "dark": "#d32f2f",
                    "light": "#e57373",
                    "main": "#f44336",
                  },
                  "getContrastText": [Function],
                  "grey": Object {
                    "100": "#f5f5f5",
                    "200": "#eeeeee",
                    "300": "#e0e0e0",
                    "400": "#bdbdbd",
                    "50": "#fafafa",
                    "500": "#9e9e9e",
                    "600": "#757575",
                    "700": "#616161",
                    "800": "#424242",
                    "900": "#212121",
                    "A100": "#d5d5d5",
                    "A200": "#aaaaaa",
                    "A400": "#303030",
                    "A700": "#616161",
                  },
                  "info": Object {
                    "contrastText": "#fff",
                    "dark": "#1976d2",
                    "light": "#64b5f6",
                    "main": "#2196f3",
                  },
                  "primary": Object {
                    "contrastText": "#fff",
                    "dark": "#303f9f",
                    "light": "#7986cb",
                    "main": "#3f51b5",
                  },
                  "secondary": Object {
                    "contrastText": "#fff",
                    "dark": "#c51162",
                    "light": "#ff4081",
                    "main": "#f50057",
                  },
                  "success": Object {
                    "contrastText": "rgba(0, 0, 0, 0.87)",
                    "dark": "#388e3c",
                    "light": "#81c784",
                    "main": "#4caf50",
                  },
                  "text": Object {
                    "disabled": "rgba(0, 0, 0, 0.38)",
                    "hint": "rgba(0, 0, 0, 0.38)",
                    "primary": "rgba(0, 0, 0, 0.87)",
                    "secondary": "rgba(0, 0, 0, 0.54)",
                  },
                  "tonalOffset": 0.2,
                  "type": "light",
                  "warning": Object {
                    "contrastText": "rgba(0, 0, 0, 0.87)",
                    "dark": "#f57c00",
                    "light": "#ffb74d",
                    "main": "#ff9800",
                  },
                },
                "props": Object {},
                "shadows": Array [
                  "none",
                  "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                  "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                  "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                  "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                  "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                  "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                  "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                  "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                  "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                  "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                  "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                  "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                  "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                  "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                  "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                  "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                  "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                  "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                  "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                  "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                  "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                  "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                  "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                  "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                ],
                "shape": Object {
                  "borderRadius": 4,
                },
                "spacing": [Function],
                "transitions": Object {
                  "create": [Function],
                  "duration": Object {
                    "complex": 375,
                    "enteringScreen": 225,
                    "leavingScreen": 195,
                    "short": 250,
                    "shorter": 200,
                    "shortest": 150,
                    "standard": 300,
                  },
                  "easing": Object {
                    "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                    "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                    "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                    "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                  },
                  "getAutoHeightDuration": [Function],
                },
                "typography": Object {
                  "body1": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "1rem",
                    "fontWeight": 400,
                    "letterSpacing": "0.00938em",
                    "lineHeight": 1.5,
                  },
                  "body2": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "0.875rem",
                    "fontWeight": 400,
                    "letterSpacing": "0.01071em",
                    "lineHeight": 1.43,
                  },
                  "button": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "0.875rem",
                    "fontWeight": 500,
                    "letterSpacing": "0.02857em",
                    "lineHeight": 1.75,
                    "textTransform": "uppercase",
                  },
                  "caption": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "0.75rem",
                    "fontWeight": 400,
                    "letterSpacing": "0.03333em",
                    "lineHeight": 1.66,
                  },
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": 14,
                  "fontWeightBold": 700,
                  "fontWeightLight": 300,
                  "fontWeightMedium": 500,
                  "fontWeightRegular": 400,
                  "h1": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "6rem",
                    "fontWeight": 300,
                    "letterSpacing": "-0.01562em",
                    "lineHeight": 1.167,
                  },
                  "h2": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "3.75rem",
                    "fontWeight": 300,
                    "letterSpacing": "-0.00833em",
                    "lineHeight": 1.2,
                  },
                  "h3": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "3rem",
                    "fontWeight": 400,
                    "letterSpacing": "0em",
                    "lineHeight": 1.167,
                  },
                  "h4": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "2.125rem",
                    "fontWeight": 400,
                    "letterSpacing": "0.00735em",
                    "lineHeight": 1.235,
                  },
                  "h5": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "1.5rem",
                    "fontWeight": 400,
                    "letterSpacing": "0em",
                    "lineHeight": 1.334,
                  },
                  "h6": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "1.25rem",
                    "fontWeight": 500,
                    "letterSpacing": "0.0075em",
                    "lineHeight": 1.6,
                  },
                  "htmlFontSize": 16,
                  "overline": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "0.75rem",
                    "fontWeight": 400,
                    "letterSpacing": "0.08333em",
                    "lineHeight": 2.66,
                    "textTransform": "uppercase",
                  },
                  "pxToRem": [Function],
                  "round": [Function],
                  "subtitle1": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "1rem",
                    "fontWeight": 400,
                    "letterSpacing": "0.00938em",
                    "lineHeight": 1.75,
                  },
                  "subtitle2": Object {
                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                    "fontSize": "0.875rem",
                    "fontWeight": 500,
                    "letterSpacing": "0.00714em",
                    "lineHeight": 1.57,
                  },
                },
                "zIndex": Object {
                  "appBar": 1100,
                  "drawer": 1200,
                  "mobileStepper": 1000,
                  "modal": 1300,
                  "snackbar": 1400,
                  "speedDial": 1050,
                  "tooltip": 1500,
                },
              }
            }
          >
            <WithStyles(ForwardRef(Button))
              component="span"
            >
              Select file
            </WithStyles(ForwardRef(Button))>
          </ThemeProvider>
          <label
            style={
              Object {
                "marginLeft": 8,
              }
            }
          >
            No file selected
          </label>
        </label>
      </WithStyles(ForwardRef(FormControl))>
    </div>
  </DialogComponent>
</Fragment>
`;

exports[`Rendering of ListResourcePanel Component Renders initial state correctly 1`] = `
<Fragment>
  <Styled(MuiBox)
    bgcolor="white"
    borderRadius={0}
    height={1}
    width={1}
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "minHeight": 0,
          "padding": "0px 16px 8px 16px",
        }
      }
      variant="dense"
    >
      <Styled(WithStyles(ForwardRef(Select)))
        onChange={[Function]}
        value="dataset"
      >
        <WithStyles(ForwardRef(MenuItem))
          dense={true}
          value="dataset"
        >
          Datasets
        </WithStyles(ForwardRef(MenuItem))>
        <WithStyles(ForwardRef(MenuItem))
          dense={true}
          value="model"
        >
          Models
        </WithStyles(ForwardRef(MenuItem))>
        <WithStyles(ForwardRef(MenuItem))
          dense={true}
          value="training"
        >
          Training
        </WithStyles(ForwardRef(MenuItem))>
      </Styled(WithStyles(ForwardRef(Select)))>
    </WithStyles(ForwardRef(Toolbar))>
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "minHeight": 0,
          "padding": "0px 16px 8px 16px",
        }
      }
      variant="dense"
    >
      <WithStyles(ForwardRef(Tooltip))
        title="Create new dataset"
      >
        <span>
          <WithStyles(ForwardRef(Button))
            color="secondary"
            disabled={false}
            onClick={[Function]}
            size="small"
            startIcon={
              <WithStyles(ForwardRef(Icon))>
                add
              </WithStyles(ForwardRef(Icon))>
            }
          >
            Create
          </WithStyles(ForwardRef(Button))>
        </span>
      </WithStyles(ForwardRef(Tooltip))>
      <Styled(MuiBox)
        flexGrow={1}
      />
      <WithStyles(ForwardRef(IconButton))
        disabled={false}
        onClick={[Function]}
        size="small"
      >
        <WithStyles(ForwardRef(Tooltip))
          title="Search"
        >
          <WithStyles(ForwardRef(Icon))>
            search
          </WithStyles(ForwardRef(Icon))>
        </WithStyles(ForwardRef(Tooltip))>
      </WithStyles(ForwardRef(IconButton))>
      <WithStyles(ForwardRef(IconButton))
        disabled={false}
        onClick={[Function]}
        size="small"
      >
        <WithStyles(ForwardRef(Tooltip))
          title="Refresh"
        >
          <WithStyles(ForwardRef(Icon))>
            refresh
          </WithStyles(ForwardRef(Icon))>
        </WithStyles(ForwardRef(Tooltip))>
      </WithStyles(ForwardRef(IconButton))>
    </WithStyles(ForwardRef(Toolbar))>
    <Styled(Styled(MuiBox))
      display="none"
      width={1}
    >
      <TextInput
        onChange={[Function]}
        placeholder="Search"
        type="search"
      />
    </Styled(Styled(MuiBox))>
    <ListResourcesTable
      columns={
        Array [
          Object {
            "field": "datasetType",
            "fixedWidth": 30,
            "render": [Function],
            "sorting": false,
            "title": "",
          },
          Object {
            "field": "displayName",
            "title": "Name",
          },
          Object {
            "field": "createTime",
            "minShowWidth": 250,
            "render": [Function],
            "rightAlign": true,
            "title": "Created at",
            "type": "datetime",
          },
        ]
      }
      data={Array []}
      height={-30}
      isLoading={false}
      onRowClick={[Function]}
      pageSize={20}
      pageSizeOptions={
        Array [
          20,
        ]
      }
      paging={true}
      rowContextMenu={
        Array [
          Object {
            "handler": [Function],
            "label": "Delete",
          },
          Object {
            "handler": [Function],
            "label": "Copy ID",
          },
          Object {
            "handler": [Function],
            "label": "Import to notebook",
          },
        ]
      }
      width={50}
    />
    <DialogComponent
      header="Are you sure you want to delete ?"
      onCancel={[Function]}
      onClose={[Function]}
      onSubmit={null}
      open={false}
      submitLabel="Ok"
    />
    <ExportData
      onClose={[Function]}
      onSuccess={[Function]}
      open={false}
    />
    <ExportModel
      onClose={[Function]}
      open={false}
    />
  </Styled(MuiBox)>
</Fragment>
`;
