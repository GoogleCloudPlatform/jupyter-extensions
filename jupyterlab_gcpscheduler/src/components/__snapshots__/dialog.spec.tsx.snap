// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SchedulerDialog Renders closed Dialog without Notebook: Dialog Closed 1`] = `
<WithStyles(ForwardRef(Dialog))
  open={false}
>
  <header
    className="header_fst2s1z"
  >
    <span
      className="title_fiw0lep"
    >
      Schedule a notebook run
    </span>
    <IconButtonMenu
      menuItems={[Function]}
    />
  </header>
  <main
    className="main_f2ra5xi"
  >
    <Initializer
      onDialogClose={[Function]}
      onInitialized={[Function]}
      projectStateService={
        Object {
          "getPermissions": [MockFunction],
          "getProjectState": [MockFunction],
          "projectId": undefined,
        }
      }
    />
  </main>
</WithStyles(ForwardRef(Dialog))>
`;

exports[`SchedulerDialog Renders with Checking IAM Message: IamMessage 1`] = `
<WithStyles(ForwardRef(Dialog))
  open={true}
>
  <header
    className="header_fst2s1z"
  >
    <span
      className="title_fiw0lep"
    >
      Schedule a notebook run
    </span>
    <IconButtonMenu
      menuItems={[Function]}
    />
  </header>
  <main
    className="main_f2ra5xi"
  >
    <div
      className="column_fghohlb"
    >
      <Message
        asActivity={true}
        text="Checking IAM Permissions"
      />
      <ActionBar
        onDialogClose={[Function]}
      />
    </div>
  </main>
</WithStyles(ForwardRef(Dialog))>
`;

exports[`SchedulerDialog Renders with Initializer: Initializer 1`] = `
<WithStyles(ForwardRef(Dialog))
  open={true}
>
  <header
    className="header_fst2s1z"
  >
    <span
      className="title_fiw0lep"
    >
      Schedule a notebook run
    </span>
    <IconButtonMenu
      menuItems={[Function]}
    />
  </header>
  <main
    className="main_f2ra5xi"
  >
    <Initializer
      onDialogClose={[Function]}
      onInitialized={[Function]}
      projectStateService={
        Object {
          "getPermissions": [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getProjectState": [MockFunction],
          "projectId": undefined,
        }
      }
    />
  </main>
</WithStyles(ForwardRef(Dialog))>
`;

exports[`SchedulerDialog Renders with Python2 warning: Python2Warning 1`] = `
<WithStyles(ForwardRef(Dialog))
  open={true}
>
  <header
    className="header_fst2s1z"
  >
    <span
      className="title_fiw0lep"
    >
      Schedule a notebook run
    </span>
    <IconButtonMenu
      menuItems={[Function]}
    />
  </header>
  <main
    className="main_f2ra5xi"
  >
    <div
      className="column_fghohlb"
    >
      <Message
        asError={true}
        text="Python 2 Notebooks are not supported. Please upgrade your Notebook to use Python 3"
      />
      <ActionBar
        onDialogClose={[Function]}
      />
    </div>
  </main>
</WithStyles(ForwardRef(Dialog))>
`;

exports[`SchedulerDialog Renders with SchedulerForm: SchedulerForm 1`] = `
<WithStyles(ForwardRef(Dialog))
  open={true}
>
  <header
    className="header_fst2s1z"
  >
    <span
      className="title_fiw0lep"
    >
      Schedule a notebook run
    </span>
    <IconButtonMenu
      menuItems={[Function]}
    />
  </header>
  <main
    className="main_f2ra5xi"
  >
    <WithFormik(InnerSchedulerForm)
      gcpService={
        Object {
          "transportService": undefined,
        }
      }
      gcpSettings={
        Object {
          "gcsBucket": "gs://test-project/notebooks",
          "projectId": "test-project",
          "schedulerRegion": "us-east1",
        }
      }
      notebook={
        Object {
          "cells": Array [
            Object {
              "cell_type": "code",
              "execution_count": 1,
              "metadata": Object {
                "tags": Array [],
              },
              "outputs": Array [
                Object {
                  "name": "stdout",
                  "output_type": "stream",
                  "text": "hello world

0

1

2
",
                },
                Object {
                  "name": "stderr",
                  "output_type": "stream",
                  "text": "output to stderr
",
                },
                Object {
                  "name": "stdout",
                  "output_type": "stream",
                  "text": "some more stdout text
",
                },
              ],
              "source": "import sys
sys.stdout.write('hello world\\\\n')
sys.stdout.flush()
for i in range(3):
    sys.stdout.write('%s\\\\n' % i)
    sys.stdout.flush()
sys.stderr.write('output to stderr\\\\n')
sys.stderr.flush()
sys.stdout.write('some more stdout text\\\\n')
sys.stdout.flush()",
            },
            Object {
              "cell_type": "markdown",
              "metadata": Object {
                "tags": Array [],
              },
              "source": "# Markdown Cell

$ e^{ \\\\pm i\\\\theta } = \\\\cos \\\\theta \\\\pm i\\\\sin \\\\theta + \\\\beta $

*It* **really** is!",
            },
            Object {
              "cell_type": "code",
              "execution_count": 2,
              "metadata": Object {
                "tags": Array [],
              },
              "outputs": Array [
                Object {
                  "ename": "SyntaxError",
                  "evalue": "invalid syntax (<ipython-input-2-6c5185427360>, line 1)",
                  "output_type": "error",
                  "traceback": Array [
                    "[0;36m  File [0;32m\\"<ipython-input-2-6c5185427360>\\"[0;36m, line [0;32m1[0m
[0;31m    this is a syntax error[0m
[0m                   ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax
",
                  ],
                },
              ],
              "source": "this is a syntax error",
            },
            Object {
              "cell_type": "code",
              "execution_count": null,
              "metadata": Object {
                "tags": Array [],
              },
              "outputs": Array [],
              "source": "print('test')",
            },
            Object {
              "cell_type": "code",
              "execution_count": 4,
              "metadata": Object {
                "tags": Array [],
              },
              "outputs": Array [
                Object {
                  "data": Object {
                    "text/latex": Array [
                      "The mass-energy equivalence is described by the famous equation
",
                      " 
",
                      "$$E=mc^2$$
",
                      " 
",
                      "discovered in 1905 by Albert Einstein. 
",
                      "In natural units ($c$ = 1), the formula expresses the identity
",
                      " 
",
                      "\\\\begin{equation}
",
                      "E=m
",
                      "\\\\end{equation}",
                    ],
                    "text/plain": Array [
                      "<IPython.core.display.Latex object>",
                    ],
                  },
                  "execution_count": 4,
                  "metadata": Object {},
                  "output_type": "execute_result",
                },
              ],
              "source": "from IPython.display import Latex
Latex('''The mass-energy equivalence is described by the famous equation
 
$$E=mc^2$$
 
discovered in 1905 by Albert Einstein. 
In natural units ($c$ = 1), the formula expresses the identity
 
\\\\\\\\begin{equation}
E=m
\\\\\\\\end{equation}''')",
            },
            Object {
              "cell_type": "code",
              "execution_count": null,
              "metadata": Object {
                "collapsed": true,
                "jupyter": Object {
                  "outputs_hidden": true,
                },
              },
              "outputs": Array [],
              "source": "",
            },
          ],
          "metadata": Object {
            "anaconda-cloud": Object {},
            "kernelspec": Object {
              "display_name": "Python [default]",
              "language": "python",
              "name": "python3",
            },
            "language_info": Object {
              "codemirror_mode": Object {
                "name": "ipython",
                "version": 3,
              },
              "file_extension": ".py",
              "mimetype": "text/x-python",
              "name": "python",
              "nbconvert_exporter": "python",
              "pygments_lexer": "ipython3",
              "version": "3.5.2",
            },
          },
          "nbformat": 4,
          "nbformat_minor": 4,
        }
      }
      notebookName="Foo.ipynb"
      onDialogClose={[Function]}
      permissions={
        Object {
          "toExecute": Array [],
          "toInitialize": Array [],
          "toSchedule": Array [],
        }
      }
      settings={
        Object {
          "changed": Object {
            "connect": [MockFunction] {
              "calls": Array [
                Array [
                  [Function],
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            },
            "disconnect": [MockFunction],
          },
          "composite": Object {
            "gcsBucket": "gs://test-project/notebooks",
            "projectId": "test-project",
            "schedulerRegion": "us-east1",
          },
          "save": [MockFunction],
          "set": [MockFunction],
        }
      }
    />
  </main>
</WithStyles(ForwardRef(Dialog))>
`;
